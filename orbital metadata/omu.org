Online MenU framework (OMU)

* Uses
** Restaurant Ordering
*** Tired of waiters that don't come to your table? Want to order immediately when you sit down without flagging for a nonexistant waiter?
*** Tired of waiting to collate everyone's orders before calling a waiter? Because paiseh to keep calling the waiter?
**** Furthermore if you don't order as a big group chefs won't have to cook chunk by chunk of orders, but cook the orders as they come (Have to verify if true)
*** Order already but paiseh to keep calling the waiter again to add-on (dessert, or drinks) to your order?
** Pay-upfront shops
*** If you can pay cashlessly, you can sit down and order online then pay via card/phone on the cardreader (which sends the order to the kitchen once payment is confirmed). Then when your number is called out you can go and collect it on the counter (or have it brought to you if atas enough)
** Islandwide Food Delivery Ordering Framework
** Event Registration
** At its very core it is a website that allows multiple users (in an area (or not)) to transmit a specific set data with their phones (as programmed by the organization) to a central location, allowing the central organization to collect (and organize) the data in real time
* User Experience
** User goes to omu.appspot.com (website address tbd)
** Enter Table ID/ Scan QR code
*** Table ID consist of a unique shop identifier tag (eg McDonalds Bedok is MCD-BDK, KFC Tampines is KFC-TMP), followed by a generated 4 digit number (the first two digits indicate table number, the last two digits are generated on)
*** How do shops register their unique ID in the first place?? Through the website?
** Brings up menu
** Every unique user is given a unique (and memorable) identifier (use animals for now). Every order the person makes is logged under his unique identifier in the order cart. This has the effect of making the splitting of bills much easier to coordinate.
** When they are satisfied, users can send their standing order to the kitchen. The website responds with a loud ding and animated visuals to give feedback that the order has actually gone through (feature to be added if free). Users can anytime go back to the website to add on food items, which are added to the standing order. The website clearly delineates the difference between an order than has gone through (processed order) vs an unconfirmed order (standing order) in the visual UI so customers aren't confused and attempt to double-order.
** The restaurant receives and collates the orders in a list that can be organized by time or table ID. A search function can be added on that narrows down the list so a specific table's order can be pulled up without scrolling through a whole list of orders (function to be added if free).
** When a chef delivers the food, it is struck off the list. Instead of being deleted, the entry can be stored in a temporary memory (and marked as 'served') which stores it until the end of the day. This way orders can be recalled if mistakes were made. (Function to be added)
** When users pay their bills, the cashier will refresh the table's ID, signifying that the users have left and can no longer order. The table ID's data is purged from the system.
* Features (to be added)
** Supports menu customization (hardcoded menu for now)
** Identify by uniquely generated number (hardcoded table numbers for now)
** Supports shop registration (hardcoded shop ID for now)
** 'Recycle Bin' that stores deleted entries in memory for the rest of the day, which can be recalled anytime before that (delete entries for now)
** Improved organization of Collated List such as being able to filter by table number.
** Identify by QR code
** Improve ID system to cope with much larger load (eg multiple franchises and restaurants)
** Make a two-tier confirmation system - once for the chef to sign entry as 'cooked' and once for the server to sign entry as 'delivered'
** Improve Collated List UI to streamline it for industrial usage. Chefs aint got time to click a mouse to delete an entry.
** Store all customer's order data along with the time/date. Data analysis can then be done on it to check which food is most popular, on what time, on what days. Such information can be helpful for a restaurant.

* Restaurant Class

** Attribute: Username

** Attrbute: Password

** Attribute: Restaurant & Location identifier (eg MCD,BDK)

** Attribute: Hashmap of existing table IDs

*** Every table will have an ID

** ID (numbering system)

*** Store Tag (3 alphabets)

*** Store location (3 alphabets)(to differentiate between franchise shops)

*** Table number (2 digits)

*** Generated alphabets (4 alphabets)('end tags')
** Every restaurant can have 100 possible end tags, but a smaller number of LED panels
** The LED panel will only display the last two digits.
